# -*- coding: utf-8 -*-
#
# This file is part of EventGhost.
# Copyright © 2005-2016 EventGhost Project <http://www.eventghost.net/>
#
# EventGhost is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# EventGhost is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with EventGhost. If not, see <http://www.gnu.org/licenses/>.


import os
import sys
import socket
import requests
import json
import threading
import random
import xml.etree.cElementTree as ElementTree
import time
from utils import parse_string, create_service_name


HEADER = """# -*- coding: utf-8 -*-
#
# This file is part of EventGhost.
# Copyright © 2005-2016 EventGhost Project <http://www.eventghost.net/>
#
# EventGhost is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# EventGhost is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with EventGhost. If not, see <http://www.gnu.org/licenses/>.
#
#
# ******************* THIS FILE IS AUTOMATICALLY GENERATED *******************
# ******************************* DO NOT MODIFY ******************************

"""

if os.name == 'nt':
    BUILD_PATH = os.path.join(
        os.path.expandvars('%APPDATA%'),
        'MiCasaVerde_Vera'
    )

else:
    BUILD_PATH = os.path.join(os.path.expanduser('~'), '.MiCasaVerde_Vera')


DEVICES_PATH = os.path.join(BUILD_PATH, 'devices')
SERVICES_PATH = os.path.join(BUILD_PATH, 'services')

SSDP_ADDR = "239.255.255.250"
SSDP_PORT = 1900
SSDP_MX = 10
SSDP_ST = "upnp:rootdevice"

SSDP_REQUEST = (
    'M-SEARCH * HTTP/1.1\r\n'
    'MX: %d\r\n'
    'ST: %s\r\n'
    'HOST: %s:%d\r\n'
    'MAN: "ssdp:discover"\r\n'
    '\r\n' % (SSDP_MX, SSDP_ST, SSDP_ADDR, SSDP_PORT)
)

DEVICE_SUBCLASS_IMPORT = (
    '''from ..services.{module_name} import {class_name} as _{class_name}\n'''
)
DEVICE_SUBCLASS_INIT_TEMPLATE = (
    '''        _{class_name}.__init__(self, parent)\n'''
)
DEVICE_CLASS_TEMPLATE = '''
from micasaverde_vera.event import Notify
from micasaverde_vera.devices import Device

{imports}

class {class_name}(Device, {subclasses}):
    _service_id = '{device_id}'
    _service_type = '{device_type}'
    
    def __init__(self, parent, node):
        self._parent = parent
        self._variables = dict()
        self._jobs = []
        self._pending_jobs = 0
        self._configured = 0
        
{subclass_inits}        if node is not None:
            def update_variables(key, value):
                for k in self._variables.keys()[:]:
                    if key in k:
                        self._variables[k] = value
                        break
                else:
                    self._variables[(key, key)] = value
                    
            for state in node.pop('states', []):
                update_variables(state['variable'], state['value'])
            
            for attr_name, attr_value in node.items():
                update_variables(attr_name, attr_value)
                
            Notify(self, 'Device.{{0}}.Created'.format(self.id))
    
    def create_variable(self, variable, value):
        """
        Creates a New Variable
        """
        
        orig_variable = variable
        variable = variable.replace('.', '').replace(' ', '')
        
        if (variable, orig_variable) in self._variables:
            return None
        else:
            self._variables[(variable, orig_variable)] = value
        
        def var_getter():
            for key, val in self._variables.items():
                if orig_variable in key:
                    return val
            
        def var_setter(val):
            for key in self._variables.keys():
                if orig_variable in key:
                    self._parent.send(
                        DeviceNum=self.id,
                        Value=val,
                        Variable=orig_variable,
                        id='variableset',
                        serviceId='{device_id}'
                    )
                    
        prop = property(fget=var_getter, fset=var_setter)
                    
        object.__setattr__(self, variable, prop)
                    
        return self._parent.send(
            DeviceNum=self.id,
            Value=value,
            Variable=orig_variable,
            id='variableset',
            serviceId='{device_id}'
        )
        
    def set_name(self, new_name):
        return self._parent.send(
            id='action',
            serviceId='{device_id}',
            action='SetName',
            DeviceNum=self.id,
            NewName=new_name
        )

    def get_name(self):
        return self._parent.send(
            id='action',
            serviceId='{device_id}',
            action='GetName',
            DeviceNum=self.id
        )
            
    @property
    def name(self):
        for key, value in self._variables.items():
            if 'name' in key or 'Name' in key:
                return value
        raise AttributeError('Attribute name is not found.')
        
    @name.setter
    def name(self, value):
        for key in self._variables.keys():
            if 'name' in key or 'Name' in key:
                self._parent.send(
                    id='device',
                    action='rename',
                    name=value,
                    device=self.id
                )
                break
        else:
            raise AttributeError('Attribute name is not found.')
    
    @property
    def Jobs(self):
        return self._jobs
        
    @Jobs.setter
    def Jobs(self, value):
        self._jobs = value
        
    @property
    def PendingJobs(self):
        return self._pending_jobs
        
    @PendingJobs.setter
    def PendingJobs(self, value):
        self._pending_jobs = value
        
    @property
    def Configured(self):
        return self._configured
        
    @Configured.setter
    def Configured(self, value):
        self._configured = value
    
    def __setattr__(self, key, value):
        if key.startswith('_') or key == 'argument_mapping':
            object.__setattr__(self, key, value)
        elif isinstance(getattr(self.__class__, key, None), property):
            object.__setattr__(self, key, value)
        elif (
            isinstance(
                getattr(self.__class__, key.replace('.', ''), None),
                property
            )
        ):
            object.__setattr__(self, key.replace('.', ''), value)
        else:
            raise AttributeError(
                'You are not allowed to set attribute {{0}}.'.format(key)
            )
'''

CLASS_TEMPLATE = '''
_default_variables = {{{attributes}
}}

_argument_mapping = {{{argument_mappings}
}}


class {class_name}(object):
    """
    Attributes:
{class_doc}
    """
    
    def __init__(self, parent):
        self._parent = parent
        self._variables = getattr(self, '_variables', dict())
        self.argument_mapping = getattr(self, 'argument_mapping', dict())
        
        def iter_mapping(mapping, storage):
            for key, value in mapping.items():
                if isinstance(value, dict):
                    storage[key] = dict()
                    iter_mapping(value, storage[key])
                else:
                    storage[key] = value
                
        iter_mapping(_default_variables, self._variables)
        iter_mapping(_argument_mapping, self.argument_mapping)
{properties}{methods}
'''

ATTR_DOC_TEMPLATE = """        {attr_name} {attr_type}: {attr_docs}\n"""
STATE_TEMPLATE = "\n    ('{attr_name}', '{orig_attr_name}'): None,"
ALLOWED_VALUES_TEMPLATE = '''
            Allowed Values:
                {values}
'''

ALLOWED_RANGE_TEMPLATE = '''
            Allowed Range:
                {values}
'''

ARGUMENT_TEMPLATE = ''',
                '{argument_name}': '{orig_argument_name}\''''

METHOD_ARGUMENT_TEMPLATE = '''
            '{method_name}': {{
                'orig_name': '{orig_method_name}'{arguments}
            }},'''

SEND_TEMPLATE = '''        self._parent.send({send_arguments}
        )'''
SEND_ARGUMENT_TEMPLATE = '''
            {keyword}={value},'''

PROPERTY_TEMPLATE = '''
    @property
    def {method}(self):
        for key, value in self._variables.items():
            if '{second_name}' in key:
                return value

    @{method}.setter
    def {method}(self, value):
{send_template}
'''

METHOD_TEMPLATE = '''
    def {method}(self, {keywords}):
{send_template}
'''

DATA_TYPES = dict(
    string='(str)',
    char='(str)',
    boolean='(bool)',
    ui4='(int)',
    ui1='(int)',
    ui2='(int)',
    i1='(int)',
    number='(int)',
    i4='(int)',
    float='(float)'
)

NUMBER_MAPPING = {
    '1': 'one_',
    '2': 'two_',
    '3': 'three_',
    '4': 'four_',
    '5': 'five_',
    '6': 'six_',
    '7': 'seven_',
    '8': 'eight_',
    '9': 'nine_',
    '0': 'zero_'
}


URL = 'http://{ip_address}/cgi-bin/cmh/'
GET_UPNP_FILES = URL + 'get_upnp_files.sh'
VIEW_UPNP_FILE = URL + 'view_upnp_file.sh?file={file}'
SYS_INFO = URL + 'sysinfo.sh'
CATEGORIES = 'http://{ip_address}/cmh/js/config/constants.js'
CATEGORY_LANG = 'http://{ip_address}/cmh/js/config/lang.js'
VERA_INFO = 'http://{ip_address}/upnp/vera.xml'


def print_list(l, indent):

    for item in l:
        if isinstance(item, list):
            if len(item) > 2:
                print indent + '['
                print_list(item, indent + '    ')
                print indent + ']'
            else:
                print indent + repr(item)
        else:
            print indent + repr(item)


def print_dict(d, indent=''):
    for key, value in d.items():
        if isinstance(value, dict):
            print indent, key, ':'
            print_dict(value, indent + '    ')
        elif isinstance(value, list):
            print indent + key + ':'
            print_list(value, indent + '    ')
        else:
            print indent + key + ':', value


def make_property_template(method, second_name, send_arguments):
    send_template = SEND_TEMPLATE.format(
        send_arguments=send_arguments
    )
    template = PROPERTY_TEMPLATE.format(
        method=method,
        second_name=second_name,
        send_template=send_template
    )
    return template


def make_method_template(method, keywords, send_arguments):
    send_template = '        return ' + SEND_TEMPLATE.format(
        send_arguments=send_arguments
    )[8:]

    template = METHOD_TEMPLATE.format(
        keywords=', '.join(keywords),
        method=method,
        send_template=send_template
    )
    return template


def make_class_template(
    service_type,
    class_name,
    methods,
    attributes,
    class_doc,
    properties
):

    cls_methods = ''
    argument_mappings = ''
    for method_name, params in methods.items():
        keywords = params['keywords']
        send_arguments = params['send_arguments']
        method_argument_mapping = params['method_argument_mapping']

        method_argument_mapping['arguments'] = ''.join(
            ARGUMENT_TEMPLATE.format(**argument)
            for argument in method_argument_mapping['arguments']
        )
        argument_mappings += (
            METHOD_ARGUMENT_TEMPLATE.format(**method_argument_mapping)
        )

        send_arguments = ''.join(
            SEND_ARGUMENT_TEMPLATE.format(
                keyword=keyword,
                value=value
            )
            for keyword, value in send_arguments
        )

        cls_methods += make_method_template(
            method_name,
            keywords,
            send_arguments
        )

    cls_properties = ''
    for property_name, items in properties.items():
        second_name, send_arguments = items

        send_arguments = ''.join(
            SEND_ARGUMENT_TEMPLATE.format(keyword=keyword, value=value)
            for keyword, value in send_arguments
        )
        cls_properties += (
            make_property_template(property_name, second_name, send_arguments)
        )


    cls_attributes = ''.join(
        STATE_TEMPLATE.format(
            attr_name=attr_name,
            orig_attr_name=orig_attr_name
        )
        for attr_name, orig_attr_name in attributes
    )

    template = CLASS_TEMPLATE.format(
        argument_mappings=argument_mappings,
        class_name=class_name,
        methods=cls_methods,
        properties=cls_properties,
        attributes=cls_attributes,
        class_doc=class_doc

    )

    return template


def make_templates(devices, services):
    if __name__ == "__main__":
        print('')
        print('')
        print('Building Templates....')

    for params in devices.values():
        device_type = params['device_type']
        device_id = params['device_id']
        device_name = params['device_name']
        class_name = params['device_class_name']
        file_path = params['device_gen_file']

        imports = []
        subclasses = []
        subclass_inits = []
        for subclass in params['subclasses']:
            subclass_name = create_service_name(subclass).replace('_', '')
            subclass_module = parse_string(subclass_name)
            subclasses += ['_' + subclass_name]

            imports += [
                DEVICE_SUBCLASS_IMPORT.format(
                    module_name=subclass_module,
                    class_name=subclass_name
                )
            ]
            subclass_inits += [
                DEVICE_SUBCLASS_INIT_TEMPLATE.format(
                    class_name=subclass_name
                )
            ]

        template = DEVICE_CLASS_TEMPLATE.format(
            device_type=device_type,
            device_id=device_id,
            class_name=class_name,
            subclasses=', '.join(subclasses),
            subclass_inits=''.join(subclass_inits),
            imports=''.join(imports)
        )

        template = template.replace(
            'self, ):',
            'self):'
        ).replace(
            ',\n        )',
            '\n        )'
        )

        if __name__ == "__main__":
            print('Writing File {0} ....'.format(file_path))

        with open(file_path, 'w') as f:
            f.write(HEADER)
            f.write(template)

    for service_name, params in services.items():
        service_type = params.pop('service_type')
        service_id = params.pop('service_id')
        class_name = params.pop('service_class_name')
        file_path = params.pop('service_gen_file')

        template = make_class_template(service_type, class_name, **params)
        template = template.replace(
            'self, ):',
            'self):'
        ).replace(
            ',\n        )',
            '\n        )'
        )

        if __name__ == "__main__":
            print('Writing File {0} ....'.format(file_path))

        with open(file_path, 'w') as f:
            f.write(HEADER)
            f.write(template)


def create_class_methods(
    service_xmlns,
    service_id,
    actions,
    methods,
    attributes
):
    gateway = True if service_id.find('HomeAutomationGateway') > -1 else False
    for action in actions:
        orig_method_name = action.find('%sname' % service_xmlns).text
        method_name = parse_string(orig_method_name)

        if method_name in ('get_name', 'set_name'):
            continue

        if method_name == 'continue':
            method_name = 'Continue'

        method_name = method_name.replace('/', '')

        for number, replacement in NUMBER_MAPPING.items():
            if method_name.startswith(number):
                method_name = replacement + method_name[len(number):]

        if __name__ == '__main__':
            print('    -Processing Method ' + method_name + '.....')

        if gateway:
            send_arguments = [
                ['id', "'action'"],
                ['action', '%r' % orig_method_name],
            ]

        else:
            send_arguments = [
                ['id', "'action'"],
                ['serviceId', '%r' % service_id],
                ['action', '%r' % orig_method_name],
                ['DeviceNum', 'self.id']
            ]
        keywords = []
        method_argument_mapping = dict(
            method_name=method_name,
            orig_method_name=orig_method_name
        )
        argument_mapping = []

        arguments = action.find('%sargumentList' % service_xmlns)

        if arguments is not None:

            for argument in arguments:
                direction = argument.find('%sdirection' % service_xmlns)

                if direction is not None:
                    if direction.text == 'out':
                        related_variable = argument.find(
                            '%srelatedStateVariable' % service_xmlns
                        )
                        if related_variable is not None:
                            attr_name = related_variable.text
                            orig_attr_name = related_variable.text
                            if (attr_name, orig_attr_name) not in attributes:
                                attributes += [(attr_name, orig_attr_name)]

                    if direction.text == 'in':
                        orig_variable_name = (
                            argument.find('%sname' % service_xmlns).text
                        )

                        if orig_variable_name == 'DataFormat':
                            continue

                        if not gateway and orig_variable_name == 'DeviceNum':
                            continue

                        variable_name = parse_string(orig_variable_name)
                        if variable_name == 'reload':
                            variable_name = 'lua_reload'

                        send_arguments += [[orig_variable_name, variable_name]]
                        keywords += [variable_name]
                        argument_mapping += [
                            dict(
                                argument_name=variable_name,
                                orig_argument_name=orig_variable_name
                            )
                        ]

        method_argument_mapping['arguments'] = argument_mapping
        if method_name not in methods:
            methods[method_name] = dict(
                keywords=keywords,
                send_arguments=send_arguments,
                method_argument_mapping=method_argument_mapping
            )


def create_class_attributes(
    service_xmlns,
    service_id,
    state_variables,
    attributes,
    properties
):
    class_doc_templates = []

    for state_variable in state_variables:
        attr_name = state_variable.find('%sname' % service_xmlns).text

        if __name__ == '__main__':
            print('    -Processing attribute ' + attr_name + '.....')

        data_type = state_variable.find('%sdataType' % service_xmlns).text

        data_type = DATA_TYPES.get(
            data_type,
            data_type
        )

        attr_docs = ''
        allowed_values = state_variable.find(
            '%sallowedValueList' % service_xmlns
        )
        if allowed_values is not None:
            a_values = []
            for value in allowed_values:
                a_values += [value.text]

            attr_docs += ALLOWED_VALUES_TEMPLATE.format(
                values='\n                '.join(a_values)
            )

        allowed_range = state_variable.find(
            '%sallowedValueRange' % service_xmlns
        )
        if allowed_range is not None:
            a_values = []
            for value in allowed_range:
                a_values += ['%s: %s' % (
                    value.tag.replace(
                        service_xmlns,
                        ''
                    ),
                    value.text
                )]
            attr_docs += ALLOWED_RANGE_TEMPLATE.format(
                values='\n                '.join(a_values)
            )

        orig_attr_name = attr_name

        attr_name = attr_name.replace('.', '')

        if attr_name != 'Name' and attr_name not in properties:

            send_arguments = [
                ['DeviceNum', 'self.id'],
                ['Value', 'value'],
                ['Variable', repr(str(orig_attr_name))],
                ['id', "'variableset'"],
                ['serviceId', repr(str(service_id))]
            ]

            properties[attr_name] = [
                orig_attr_name,
                send_arguments
            ]

        if (attr_name, orig_attr_name) not in attributes:

            attributes += [(attr_name, orig_attr_name)]

            class_doc_templates += [
                ATTR_DOC_TEMPLATE.format(
                    attr_name=attr_name,
                    attr_type=data_type,
                    attr_docs=attr_docs
                )
            ]

    return ''.join(class_doc_templates)


def discover():
    if __name__ == "__main__":
        print('Discovering Vera....')
    dest = socket.gethostbyname(SSDP_ADDR)

    def connect_sock(bind=False):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        if bind:
            sock.bind((socket.gethostbyname(socket.gethostname()), 0))
        sock.sendto(SSDP_REQUEST, (dest, SSDP_PORT))
        sock.settimeout(7)

        try:
            while True:
                data, address = sock.recvfrom(1024)
                if 'luaupnp.xml' in data:
                    return address[0]
        except socket.timeout:
            sock.close()

    ip_address = connect_sock()
    if ip_address is None:
        ip_address = connect_sock(bind=True)

    return ip_address


def get_categories(ip_address):
    response = requests.get(
        CATEGORIES.format(ip_address=ip_address),
        timeout=5
    )
    data = response.content
    data = data[data.find('CategoryNameById = {') + 19:]
    categories = eval(data[:data.find('}') + 1])

    response = requests.get(
        CATEGORY_LANG.format(ip_address=ip_address),
        timeout=5
    )

    category_mapping = json.loads(response.content[15:-1])
    out_categories = dict()

    for category_num in categories.keys()[:]:
        categories[str(category_num)] = categories.pop(category_num)

    for category_num in categories.keys()[:]:
        category_num = category_num.split('_')
        if len(category_num) == 1 or category_num[1] == '0':
            category_type = categories.pop('_'.join(category_num))
            category_name = category_mapping['Tokens'][category_type]
            category_name = category_name.replace('\\', '')
            out_categories[category_num[0]] = {'0': category_name}

    for category_num in categories.keys()[:]:
        category_type = categories.pop(category_num)
        category_num = category_num.split('_')
        category_name = category_mapping['Tokens'][category_type]
        category_name = category_name.replace('\\', '')
        out_categories[category_num[0]][category_num[1]] = category_name

    del category_mapping
    return out_categories


def get_vera_info(ip_address):
    response = requests.get(
        SYS_INFO.format(ip_address=ip_address),
        timeout=5
    )
    data = response.json()
    serial_number = data['installation_number']
    fw_version = data['firmware_version']
    zw_version = data['zwave_version']
    home_id = data['zwave_homeid']

    response = requests.get(
        VERA_INFO.format(ip_address = ip_address),
        timeout=5
    )

    xml_root = ElementTree.fromstring(response.content)

    xml_root = xml_root.find(
        '{urn:schemas-upnp-org:device-1-0}'
        'device'
    )
    manufacturer = xml_root.find(
        '{urn:schemas-upnp-org:device-1-0}'
        'manufacturer'
    ).text
    model_name = xml_root.find(
        '{urn:schemas-upnp-org:device-1-0}'
        'modelName'
    ).text
    model_number = xml_root.find(
        '{urn:schemas-upnp-org:device-1-0}'
        'modelNumber'
    ).text
    model_description = xml_root.find(
        '{urn:schemas-upnp-org:device-1-0}'
        'modelDescription'
    ).text

    return (
        manufacturer,
        model_name,
        model_number,
        model_description,
        serial_number,
        fw_version,
        zw_version,
        home_id
    )


def get_data(url):

    try:
        response = requests.get(url, timeout=1)
    except (requests.ConnectionError, requests.Timeout):
        time.sleep(random.randrange(1, 3) / 10)
        return get_data(url)

    response = response.content

    if 'doesn\'t exist' in response:
        return None, None

    if 'xmlns' in response:
        xmlns = (
            '{%s}' %
            response[response.find('xmlns="') + 7:response.find('">')]
        )
    else:
        xmlns = ''

    return response, xmlns


def convert_id_to_type(in_id):
    in_id = in_id.split(':')
    in_id[2] = 'service'

    if len(in_id) == 5:
        return ':'.join(in_id)

    out_id = in_id[-1]
    out_type = ''
    while out_id[-1].isdigit():
        out_type = out_id[-1] + out_type
        out_id = out_id[:-1]

    return ':'.join(in_id[:-1] + [out_id, out_type])


def convert_type_to_id(in_type):
    in_type = in_type.split(':')

    if len(in_type) == 3:
        in_type.insert(2, 'deviceId')
    else:
        in_type[2] = 'deviceId'

    if len(in_type) == 4:
        return ':'.join(in_type)

    in_type[3] = (
            in_type[3][:1].upper() + in_type[3][1:] + in_type[4]
    )
    return ':'.join(in_type[:4])


def get_files(ip_address, update):
    def get_data_file(data_file_name):
        if __name__ == '__main__':
            print('-Retreiving File ' + data_file_name)
        return get_data(
            VIEW_UPNP_FILE.format(
                ip_address=ip_address,
                file=data_file_name
            )
        )

    err = 0

    while err < 10:
        try:
            response = requests.get(
                GET_UPNP_FILES.format(ip_address=ip_address),
                timeout=1
            )
            err = 10
        except requests.ConnectTimeout:
            if err == 9:
                raise
            err += 1

    device_files = {}
    service_files = {}
    downloaded_files = {}

    threads = []
    lock = threading.Lock()

    def get_thread(url):
        if url.startswith('I_'):
            threads.remove(threading.currentThread())
            return
        response, xmlns = get_data_file(url)
        if response is None:
            downloaded_files[url] = None
        else:
            xml = ElementTree.fromstring(response)

            device_type = xml.find(
                './/%sdeviceType' % xmlns
            )

            lock.acquire()

            if device_type is not None:
                device_files[url] = dict(
                    device_type=device_type.text,
                    device_xml = xml,
                    device_xmlns = xmlns
                )
            else:
                service_files[url] = dict(
                    service_xml=xml,
                    service_xmlns=xmlns
                )
            lock.release()

        threads.remove(threading.currentThread())

    for f in response.content.split('\n'):
        if f.endswith('.xml.lzo'):
            while len(threads) > 9:
                pass

            t = threading.Thread(target=get_thread, args=(f,))
            threads += [t]
            t.start()

    while threads:
        pass

    for device_params in device_files.values():
        device_xml = device_params['device_xml']
        device_xmlns = device_params['device_xmlns']
        device_type = device_params['device_type']
        device_id = convert_type_to_id(device_type)
        device_name = create_service_name(device_type)
        device_class_name = device_name.replace('_', '')
        device_class_name = (
            device_class_name[0].upper() + device_class_name[1:]
        )
        device_file_name = parse_string(device_class_name) + '.py'

        device_params.update(
            dict(
                device_id=device_id,
                device_name=device_name,
                device_class_name=device_class_name,
                device_file_name=device_file_name,
                services=[]
            )
        )

        services = device_xml.findall('.//*%sserviceList/' % device_xmlns)

        implimentations = device_xml.findall(
            './/*%simplementationList/' % device_xmlns
        )

        for implimentation in implimentations:
            implimentation = implimentation.text + '.lzo'
            if implimentation in service_files:
                device_params['services'] += [implimentation]

        for service in services:
            service_type = service.find(
                '%sserviceType' % device_xmlns
            ).text
            service_id = service.find('%sserviceId' % device_xmlns).text

            if service_type.endswith(':'):
                service_type += '1'
                if not service_id.endswith('1'):
                    service_id += '1'

            service_name = create_service_name(service_id)
            service_class_name = service_name.replace('_', '')
            service_file_name = parse_string(service_class_name) + '.py'

            scpd_url = (
                service.find('%sSCPDURL' % device_xmlns).text + '.lzo'
            )

            scpd_url=scpd_url.replace('/dri/', '')

            if scpd_url in service_files:
                device_params['services'] += [scpd_url]

                if 'service_type' not in service_files[scpd_url]:
                    service_params = service_files[scpd_url]
                    service_params.update(
                        dict(
                            service_type=service_type,
                            service_id=service_id,
                            service_name=service_name,
                            service_class_name=service_class_name,
                            service_file_name=service_file_name
                        )
                    )

    return device_files, service_files


def build_files(ip_address, log=False, update=False):

    if log:
        global __name__
        __name__ = '__main__'

    if not os.path.exists(BUILD_PATH):
        os.makedirs(BUILD_PATH)
        with open(os.path.join(BUILD_PATH, '__init__.py'), 'w') as f:
            f.write("__import__('pkg_resources').declare_namespace('core')\n")

    if not os.path.exists(DEVICES_PATH):
        os.makedirs(DEVICES_PATH)
        with open(os.path.join(DEVICES_PATH, '__init__.py'), 'w') as f:
            f.write('')

    if not os.path.exists(SERVICES_PATH):
        os.makedirs(SERVICES_PATH)
        with open(os.path.join(SERVICES_PATH, '__init__.py'), 'w') as f:
            f.write('')

    device_files, service_files = get_files(ip_address, update)

    # found_services = invoke(ip_address, update)
    found_services = dict()
    found_devices = dict()

    def build_service(
        service_type,
        service_id,
        service_name,
        service_xml,
        service_xmlns,
        service_class_name,
        service_gen_file
    ):

        if service_name in found_services:
            svc = found_services[service_name]
            methods = svc['methods']
            attributes = svc['attributes']
            class_doc = svc['class_doc']
            properties = svc['properties']

        else:
            if __name__ == "__main__":
                print('-Processing Service ' + service_id + '.....')
            methods = dict()
            attributes = []
            class_doc = ''
            properties = dict()

        actions = service_xml.find('%sactionList' % service_xmlns)

        if actions is not None:
            create_class_methods(
                service_xmlns,
                service_id,
                actions,
                methods,
                attributes
            )

        state_variables = service_xml.find(
            '%sserviceStateTable' % service_xmlns
        )
        if state_variables is not None:
            docs = create_class_attributes(
                service_xmlns,
                service_id,
                state_variables,
                attributes,
                properties
            )
            class_doc += docs

        found_services[service_name] = dict(
            service_type=service_type,
            service_id=service_id,
            service_class_name=service_class_name,
            service_gen_file=service_gen_file,
            methods=methods,
            attributes=attributes,
            class_doc=class_doc,
            properties=properties,

        )

    for scpd_url, svc in service_files.items():

        if 'service_type' not in svc:
            svc_name = scpd_url.replace('S_', '').replace('.xml.lzo', '')
            svc_id = 'urn:micasaverde-com:serviceId:' + svc_name
            svc_type = convert_id_to_type(svc_id)
            svc_class_name = svc_name.replace('_', '')
            svc_file_name = parse_string(svc_class_name) + '.py'
            svc_xml = svc['service_xml']
            svc_xmlns = svc['service_xmlns']

            svc_gen_file = os.path.join(
                SERVICES_PATH,
                svc_file_name
            )

            svc.update(
                dict(
                    service_type=svc_type,
                    service_id=svc_id,
                    service_name=svc_name,
                    service_class_name=svc_class_name,
                    service_gen_file=svc_gen_file
                )
            )

            save_service = (
                not update or
                (update and not os.path.exists(svc_gen_file))
            )

            if not save_service and update and __name__ == "__main__":
                print('-File Exists ' + svc_gen_file)

            if save_service:
                build_service(
                    service_type=svc_type,
                    service_id=svc_id,
                    service_name=svc_name,
                    service_xml=svc_xml,
                    service_xmlns=svc_xmlns,
                    service_class_name=svc_class_name,
                    service_gen_file=svc_gen_file
                )

    for device_file in device_files.keys()[:]:
        device_data = device_files[device_file]
        if not device_data:
            del device_files[device_file]
            continue
        device_type = device_data['device_type']
        device_id = device_data['device_id']
        device_name = device_data['device_name']
        device_class_name = device_data['device_class_name']
        device_file_name = device_data['device_file_name']
        services = device_data['services']

        device_gen_file = os.path.join(
            DEVICES_PATH,
            device_file_name
        )

        save_device = (
            not update or (update and not os.path.exists(device_gen_file))
        )

        if not save_device and update and __name__ == "__main__":
            print('-File Exists ' + device_gen_file)

        if save_device:
            if device_type not in found_devices:
                if __name__ == '__main__':
                    print('-Processing Device ' + device_type + '.....')

                found_devices[device_type] = dict(
                    subclasses=[],
                    device_type=device_type,
                    device_id=device_id,
                    device_name=device_name,
                    device_class_name=device_class_name,
                    device_gen_file=device_gen_file
                )

            subclasses = found_devices[device_type]['subclasses']
        else:
            subclasses = []

        for scpd_url in services:
            service_data = service_files[scpd_url]
            if 'service_gen_file' in service_data:
                svc_type = service_data['service_type']
            else:
                svc_type = service_data['service_type']
                svc_id = service_data['service_id']
                svc_name = service_data['service_name']
                svc_class_name = service_data['service_class_name']
                svc_file_name = service_data['service_file_name']
                svc_xml = service_data['service_xml']
                svc_xmlns = service_data['service_xmlns']

                svc_gen_file = os.path.join(
                    SERVICES_PATH,
                    svc_file_name
                )

                save_service = (
                    not update or
                    (update and not os.path.exists(svc_gen_file))
                )

                if not save_service and update and __name__ == "__main__":
                    print('-File Exists ' + svc_gen_file)

                if save_service:
                    build_service(
                        service_type=svc_type,
                        service_id=svc_id,
                        service_name=svc_name,
                        service_xml=svc_xml,
                        service_xmlns=svc_xmlns,
                        service_class_name=svc_class_name,
                        service_gen_file=svc_gen_file
                    )

            if save_device:
                if svc_type not in subclasses:
                    subclasses += [svc_type]

        if save_device:
            found_devices[device_type]['subclasses'] = subclasses[:]

    make_templates(found_devices, found_services)


def invoke(ip_address, update=False):
    url = 'http://{ip}:3480/data_request'.format(ip=ip_address)

    response = requests.get(url, params=dict(id='invoke'))
    data = response.content
    services = dict()

    for line in data.split('\n'):
        found_device = line.find('<a href=')
        if found_device > -1:
            line = (
                line[found_device + 9:line.find('">')].replace(
                    'lu_invoke',
                    'invoke'
                )
            )
            if 'RunScene' not in line:
                service_name = ''
                response = requests.get(
                    'http://{ip}:3480/{path}'.format(ip=ip_address, path=line)
                )
                device_data = response.content
                methods = dict()
                attributes = []
                properties = dict()
                class_doc = ''
                for device_line in device_data.split('\n'):
                    command_found = device_line.find('<a href=')

                    found_service = device_line.find('<br><i>')
                    if found_service > -1:
                        if service_name:
                            service_class_name = service_name.replace('_', '')
                            service_file_name = (
                                parse_string(service_class_name) + '.py'
                            )

                            service_gen_file = os.path.join(
                                SERVICES_PATH,
                                service_file_name
                            )

                            save_service = (
                                not update or
                                (
                                    update and
                                    not os.path.exists(service_gen_file)
                                )
                            )

                            if (
                                not save_service and
                                update and
                                __name__ == "__main__"
                            ):
                                print('-File Exists ' + service_gen_file)

                            if save_service:

                                services[service_name] = dict(
                                    service_id=service_id,
                                    service_class_name=service_class_name,
                                    service_gen_file=service_gen_file,
                                    methods=methods,
                                    attributes=attributes,
                                    class_doc=class_doc,
                                    properties=properties
                                )

                            methods = dict()
                            attributes = []
                            class_doc = ''
                            properties = dict()



                        service_id = (
                            device_line[
                            found_service + 7: device_line.find('</i>')]
                        )

                        service_name = create_service_name(service_id)

                        if service_name in services:
                            svc = services[service_name]
                            methods = svc['methods']
                            attributes = svc['attributes']
                            class_doc = svc['class_doc']
                            properties = svc['properties']

                        else:
                            if __name__ == "__main__":
                                print(
                                    '-Processing Service' +
                                    service_id +
                                    '.....'
                                )

                            methods = dict()
                            attributes = []
                            class_doc = ''
                            properties = dict()

                    if command_found > -1:
                        send_arguments = []
                        method = []
                        keywords = []

                        command_line = device_line[command_found + 9:]
                        command = command_line[:command_line.find('">')]

                        command = command.replace(
                            'lu_variableset',
                            'variableset'
                        ).replace(
                            'data_request?',
                            ''
                        ).split('&')

                        params = dict(
                            list(
                                tuple(param.split('=', 1))
                                for param in command
                            )
                        )

                        for key in sorted(params.keys()[:]):
                            value = params[key]
                            if not value:
                                value = parse_string(key)
                                if value == 'reload':
                                    value = 'lua_reload'
                                if key == 'Value':
                                    value = 'value'
                                keywords += [value]

                            elif key == 'Value':
                                value = 'value'
                                keywords += [value]
                            elif key == 'DeviceNum':
                                value = 'self.id'
                            else:
                                value = '%r' % value

                            send_arguments += [[key, value]]

                        if params['id'] == 'action':
                            method_name = parse_string(params['action'])

                            if method_name in ('get_name', 'set_name'):
                                continue

                            if method_name not in methods:
                                if __name__ == '__main__':
                                    print(
                                        '    -Processing Method ' +
                                        method_name +
                                        '.....'
                                    )
                                methods[method_name] = [
                                    keywords,
                                    send_arguments
                                ]

                        if params['id'] == 'variableset':

                            orig_attr_name = params['Variable']
                            attr_name = orig_attr_name.replace('.', '')
                            if attr_name not in properties:
                                if __name__ == '__main__':
                                    print(
                                        '    -Processing Property ' +
                                        attr_name +
                                        '.....'
                                    )
                                properties[attr_name] = [
                                    orig_attr_name,
                                    send_arguments
                                ]

                            if (
                                (attr_name, orig_attr_name)
                                not in attributes
                            ):
                                attributes += [
                                    (attr_name, orig_attr_name)
                                ]

                if service_name:
                    service_class_name = service_name.replace('_', '')
                    service_file_name = (
                        parse_string(service_class_name) + '.py'
                    )

                    service_gen_file = os.path.join(
                        SERVICES_PATH,
                        service_file_name
                    )

                    if (
                        not update or
                        (update and not os.path.exists(service_gen_file))
                    ):

                        services[service_name] = dict(
                            service_id=service_id,
                            service_class_name=service_class_name,
                            service_gen_file=service_gen_file,
                            methods=methods,
                            attributes=attributes,
                            class_doc=class_doc,
                            properties=properties
                        )
    return services

def main(ip_address=''):
    if not ip_address:
        ip_address = discover()

    if ip_address is not None:
        (
            manufacturer,
            model_name,
            model_number,
            model_description,
            serial_number,
            fw_version,
            zw_version,
            home_id
        ) = get_vera_info(ip_address)

        print('-' * 13 + ' Vera Located ' + '-' * 13)
        print('')
        print('-Manufacturer: ' + manufacturer)
        print('-Model Name: ' + model_name)
        print('-Model Number: ' + model_number)
        print('-Model Description: ' + model_description)
        print('-Serial Number: ' + serial_number)
        print('-Firmware Version: ' + fw_version)
        print('-ZWave Version: ' + zw_version)
        print('-Home Id: ' + home_id)
        print('-' * 40)
        print('')

        print('Building Categories....')
        categories = get_categories(ip_address)

        print('')
        print('')
        print('Building Classes....')

        build_files(ip_address)

if __name__ == "__main__":
    ip = raw_input(
        'input ip address of vera\n'
        'or leave blank for auto discovery\n'
    )
    main(ip)
